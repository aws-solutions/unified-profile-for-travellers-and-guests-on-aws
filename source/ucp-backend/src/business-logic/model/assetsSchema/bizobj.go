// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tah-common-glue-schemas/air_booking.glue.json (4.179kB)
// tah-common-glue-schemas/clickevent.glue.json (1.146kB)
// tah-common-glue-schemas/guest_profile.glue.json (2.058kB)
// tah-common-glue-schemas/hotel_booking.glue.json (8.662kB)
// tah-common-glue-schemas/hotel_stay_revenue.glue.json (1.388kB)
// tah-common-glue-schemas/pax_profile.glue.json (2.161kB)

package assetsSchema

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tahCommonGlueSchemasAir_bookingGlueJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x6e\xe3\x46\x0c\x7e\x17\x9d\x75\xe9\xcf\x49\x58\xf8\x10\x6f\x0b\x18\x28\xb2\x0b\xc4\xed\xa5\xe8\x81\xd6\x50\x32\xb3\x23\x52\xe0\x50\x46\x84\x20\xef\x5e\x48\xd6\xcf\x48\xd9\xa4\x5b\x3b\xd8\xcb\xe6\x36\xc3\xa1\x3e\x72\xc8\x6f\x48\xea\x31\xc9\xc5\x37\x15\x87\x24\xfb\xfb\x31\x61\xa8\x30\xc9\x12\x39\xdc\x63\x6e\x7f\xa1\x06\x12\x4e\xd2\xc4\xda\x1a\x93\xec\x31\xa1\xf0\x59\xa9\x22\xa3\x13\x26\x99\x69\x83\x69\x42\x5c\x37\x76\x67\x4a\x5c\x26\x59\x42\x6c\xc9\xd3\x53\x3a\x01\x55\xe2\xd0\x5f\x80\x13\xce\x8b\x18\x8a\xdc\x95\x00\xf8\x60\xa8\x0c\x7e\xe7\xc2\x4b\x48\x05\xf8\xf0\x0c\x0a\x54\xa1\xfd\x10\x4c\x9b\xdc\x3e\x90\xcb\xce\xd0\xe9\xce\xdd\x42\x85\xe3\x4e\x94\x4a\x62\x30\xe2\xf2\xae\x0d\x86\xd5\x70\xb0\xd9\x2c\x7c\xf0\x10\xec\xcf\xda\x81\xa1\xfb\x74\x6d\x40\x72\xc5\x37\xc1\x89\x7c\xba\x69\xdf\xc6\xa7\xb7\xc1\x21\xe1\xed\x11\x98\xd1\xef\xae\xcd\x7d\xad\x94\xe3\xff\xca\xfa\x90\xef\x60\x60\x4d\xc8\x16\x1c\x08\x58\x56\xc8\xbb\x89\x09\x35\x84\x80\x5c\xa2\xce\xa2\x02\x14\xb7\x1e\x42\x98\x74\x3a\x07\xb2\x01\xc0\xc4\xc0\x67\x85\x17\xb0\xf4\x00\x01\x87\x65\x81\xb8\xb2\x04\x95\x34\x6c\xc3\x71\xe7\xfb\xc4\xaa\xcd\x66\x93\x96\x0a\xec\xf6\x33\xd6\x92\x6a\x64\xc4\xa8\xa0\x2f\xa6\xe2\xb5\x6b\x17\x2a\x23\x83\x53\x93\x71\xe5\xb0\x06\xb5\x46\xf1\x23\x18\x3e\x13\xee\x69\x7e\x0e\xa0\x4a\x27\xf0\xb1\xde\x20\x8a\xb5\x5c\xa3\x7d\x96\xc7\xfd\x39\xb0\xb6\x0a\x82\x02\x7f\xc9\x88\x2d\xfd\x3e\x4e\x15\x9e\xca\xa3\xdd\x36\xd5\x01\x75\x94\x11\x9f\x90\x4d\xb4\x5d\x64\xf0\x0e\xc1\x42\xef\xd9\x74\x7e\xd3\xfe\x3e\x65\x7e\x71\x89\x67\x84\xe0\xb3\x01\x62\xeb\x52\x39\xd0\x6c\xcc\xee\xf7\x36\xb8\x20\x8e\xa2\x35\xfa\x62\x51\x79\x67\xcd\x3b\x6b\xbe\xc6\x9a\xb9\x08\x72\x21\x97\x90\x67\x02\x58\xb9\x14\x8f\x10\x53\x64\xa7\x42\xbb\x68\xa8\xa3\x70\xea\x8c\x5f\xd1\xba\x69\x57\x5a\xb3\x00\x2b\x20\xbf\xb2\x1e\x15\xdd\x14\x9c\x53\x5c\x94\xf4\x0a\xb4\xcd\x0e\x22\x1e\x81\x37\x9b\xb4\x3e\x0a\xaf\x4b\x78\x0c\xc0\x0b\x7a\xac\xbe\x4f\xf3\xae\xd6\x6b\xbb\x15\x87\xe7\x78\x8f\x06\x5f\x83\xf4\xc4\xf8\x53\xbc\xf9\x39\xde\xfc\x12\x6f\x7e\x9d\x2e\x4e\x36\xdd\xb9\xcb\xe8\xd4\x97\xf2\xce\xf4\xe8\xeb\x3c\xdc\x6c\xd2\x5a\xe5\x44\x9c\x7f\x83\xa2\x04\x03\xbf\x8d\x8e\x87\x5b\x7d\x83\x89\x75\x34\x8f\xc2\xa2\x54\x50\x3e\xbd\x31\xd2\x60\xf1\xd0\x55\x91\x73\x1e\x63\x49\x97\xe8\x78\x5f\x22\xbb\x38\xe2\xc2\xd2\x4c\xac\xe8\xf8\xf0\xa9\xb8\x21\xb5\xe3\xfc\x3d\x97\x0d\x94\xff\x7d\x51\xee\x4b\x10\xf8\x21\x94\xaf\xea\xde\xcb\x61\x4f\xe6\x71\x9e\x17\x14\xd9\xb6\x52\xd5\xc0\x53\x22\xbc\xb4\xe0\xad\xfd\xac\x52\x2a\x54\xab\x8c\xcf\x7c\xaf\xcf\xe7\xcb\x28\x78\x0c\xc3\x8c\xd0\xaf\xf7\x72\x8b\x0f\xf6\x07\x9e\x70\x1c\x32\x7c\xbf\x1e\xf4\xef\x85\x18\x5d\x54\x35\x1c\xb2\x51\x6f\x5a\x8a\x17\x0d\x77\xa4\x9b\xe7\x1b\x07\x06\xf1\x2c\xb2\x2a\x05\x6d\x57\x90\xbb\x42\xa0\x55\x1f\xa7\xcb\xea\x41\x8f\xb2\x8f\xc8\x9e\xe7\x1d\xe6\x5c\xdc\xbe\xe0\xfc\xe4\x41\xdd\x42\x15\xd4\xfd\xf6\x50\xc7\xdb\xed\xe9\x34\xbd\xf4\x87\x9a\x96\x4d\x24\x4a\x58\xfc\xce\x7f\xa0\xe7\xa6\xd2\x74\x7f\x2f\xcb\x16\x06\x79\x0f\xb8\x14\x9e\xa4\xc9\x8f\xa8\xbb\x8f\x3f\x74\xc0\x56\xff\x17\x52\x49\xf7\xed\xb5\xff\xa8\x5d\x0b\xba\xf6\x5f\xa7\xeb\x42\x57\x62\x9c\x1b\xfd\x45\x20\xff\x3c\xfd\x1b\x00\x00\xff\xff\x7f\xdb\xda\x6d\x53\x10\x00\x00")

func tahCommonGlueSchemasAir_bookingGlueJsonBytes() ([]byte, error) {
	return bindataRead(
		_tahCommonGlueSchemasAir_bookingGlueJson,
		"tah-common-glue-schemas/air_booking.glue.json",
	)
}

func tahCommonGlueSchemasAir_bookingGlueJson() (*asset, error) {
	bytes, err := tahCommonGlueSchemasAir_bookingGlueJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tah-common-glue-schemas/air_booking.glue.json", size: 4179, mode: os.FileMode(0644), modTime: time.Unix(1680804270, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0xff, 0xc6, 0x2, 0x59, 0xc0, 0x27, 0x2f, 0x89, 0xd4, 0xb4, 0x3e, 0x7e, 0x13, 0x4e, 0xb3, 0x70, 0xfe, 0xaf, 0xb2, 0x7f, 0xb9, 0x80, 0xe, 0xc6, 0xe7, 0xac, 0xb9, 0xb6, 0xa8, 0xfe, 0xd8}}
	return a, nil
}

var _tahCommonGlueSchemasClickeventGlueJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd2\xc1\x6a\xc3\x30\x0c\x06\xe0\x77\xd1\x39\x4f\x60\x4a\x61\xc7\xdd\x06\x83\x5e\xc6\x18\x9a\xa3\x16\x81\x2d\x1b\x4b\xce\x28\x25\xef\x3e\xd2\xb4\x81\x42\x16\x58\x9a\x53\x14\xa1\x7c\xfc\x48\xb9\x80\x4f\xa1\x46\x51\x70\x1f\x17\x10\x8c\x04\x0e\x62\x6a\x29\x1c\xa8\x28\x27\x81\x06\xec\x9c\x09\xdc\x05\x58\xdf\x0a\x47\x36\xee\x08\x9c\x95\x4a\x0d\xb0\xe4\x6a\xef\x56\x58\x4e\xe0\x40\xc7\xa2\xef\x9b\x89\xa2\x8e\xc4\xbe\xae\xc2\x26\x10\x47\x52\xc3\x98\x9f\xd4\xb0\x14\xee\x30\xac\xf3\x58\x6c\x26\x5a\xb7\xc9\xbe\x30\xe7\xc0\x1e\x6d\x41\x3a\x62\xd0\x39\xaa\x7a\xdb\x71\xeb\x46\x74\xff\xa0\xfa\xc0\x24\xb6\x21\xd8\x52\xc7\xfe\xcf\x93\x2e\x81\x55\xa9\xe0\x89\xc4\x66\x5d\x25\x5d\x5a\xe2\x8a\xa4\x68\x56\xf8\xbb\x1a\xe9\xbf\x50\x2c\x05\xcf\xbb\x1b\x3d\x7c\x76\xc3\x9b\x81\xbd\xd7\xe3\xe3\x80\xa1\xce\xb5\xd4\x4d\xc8\x90\xaa\x91\x1a\xc7\xd1\x63\x48\x68\xd3\xeb\x7d\xec\xda\xdd\xef\x1f\xd3\x93\xb4\x39\xf1\xa6\xa7\xc3\x1f\x7d\xf1\x3e\x55\xb1\xd7\xf6\xc9\x9f\x75\xb8\xe5\x4a\xe4\xb3\xff\x0d\x00\x00\xff\xff\x99\x6a\x38\x13\x7a\x04\x00\x00")

func tahCommonGlueSchemasClickeventGlueJsonBytes() ([]byte, error) {
	return bindataRead(
		_tahCommonGlueSchemasClickeventGlueJson,
		"tah-common-glue-schemas/clickevent.glue.json",
	)
}

func tahCommonGlueSchemasClickeventGlueJson() (*asset, error) {
	bytes, err := tahCommonGlueSchemasClickeventGlueJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tah-common-glue-schemas/clickevent.glue.json", size: 1146, mode: os.FileMode(0644), modTime: time.Unix(1680804270, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x64, 0xbf, 0x90, 0x16, 0x55, 0xf8, 0x3, 0xda, 0xa, 0xfe, 0x69, 0xe9, 0x70, 0xd5, 0x12, 0xa9, 0xe2, 0x19, 0x7, 0xb3, 0x2c, 0xee, 0xfe, 0xf4, 0x7e, 0xb3, 0xf1, 0x1c, 0x46, 0x4b, 0xfc}}
	return a, nil
}

var _tahCommonGlueSchemasGuest_profileGlueJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x6f\xdb\x30\x0c\xc5\xbf\x8b\xce\xbe\xec\xcf\xc9\x28\x72\x68\xae\x43\x5a\x60\xed\x2e\xc3\x0e\x8c\x45\x3b\x2c\x24\x52\xa0\xe8\x60\x46\x90\xef\x3e\x38\x89\x57\x67\x5b\xd6\x02\xf2\x8d\x84\xe4\xdf\x7b\xa6\xa4\x77\x70\x8d\x84\x3e\x72\x76\xf5\xf7\x83\x63\x88\xe8\x6a\x17\xc5\x63\xf8\x86\x9a\x49\xd8\x55\xce\x86\x84\xae\x3e\x38\xca\x8f\x4a\x91\x8c\xf6\xe8\x6a\xd3\x1e\x2b\x47\x9c\x7a\xfb\x6a\x4a\xdc\xb9\xda\xe5\x73\x71\x3c\x56\xbf\x51\xe4\x0b\x01\x01\xb2\x3d\x27\x0f\x86\xfe\xa1\xd4\x4c\xa3\xb8\x08\x67\xe6\xe9\x7e\x58\xc6\x53\x31\x07\x23\x50\xc8\xb7\x20\x2d\x84\xfc\x17\x05\x54\x61\xb8\xcb\xa6\x7d\x63\x77\xe3\x67\xf5\x99\x5b\x81\xf7\x8a\x39\x4f\x6d\x52\x8a\xa0\x43\xbd\x15\x09\x08\xbc\x5a\x5d\x09\xa7\x9d\x30\x2e\x24\xcc\x7d\xdc\xa2\xde\xd0\xad\x1a\xe9\xd9\x74\x58\x8b\xc7\x9a\xd8\xfe\xf0\x71\x31\xbd\x94\x95\x40\x8c\x1f\xe6\xcd\xc7\x79\xf3\x69\xde\x7c\x9e\x9a\x86\x6c\x98\xea\x6c\x60\x27\xd8\x08\x6e\x46\xcb\xd3\x3f\x42\x9c\xea\x55\x95\x54\xf6\xc4\xcd\x3b\x36\x4a\x36\x08\xeb\xd9\xf2\x65\x1a\xef\x90\xf8\xdf\xe9\xed\x84\x45\xa9\xa5\xa6\xf0\xfa\xb5\xa4\xd9\x36\x63\x5d\xc6\x89\xe4\x7d\xc0\x05\x40\xe3\x1b\x5d\x00\xd3\x21\x7b\xd4\x42\x48\x52\x61\xe9\x4b\x53\x67\xcc\x9b\x87\xf6\x9e\xd4\x76\xc5\xb3\xe1\xae\x87\xee\xe6\x6c\xfe\xf9\x52\xde\xb8\x67\x57\x02\x0c\x46\xc2\x10\xc8\x6e\xc6\x5a\xb1\xc6\x8b\x6c\x9f\xc8\x42\xe9\x01\x27\x50\x64\x5b\x4b\x4c\xc0\xa5\x19\x1c\x64\x80\x60\xc3\xa3\x4a\xa7\x10\x0b\x82\x88\xfc\x6b\x06\x9e\x58\x9b\xd7\x29\x54\x49\x88\x2d\xd7\x6d\x10\xb0\x73\xf3\xcc\x64\xd7\xab\x4f\xb2\xc1\x9f\xf6\x05\xf7\x18\x2e\x1b\xc3\xa9\xbe\x6c\x7a\x11\x62\x9c\x34\x4e\x89\xf0\xe3\xf8\x2b\x00\x00\xff\xff\x53\x35\xa8\x52\x0a\x08\x00\x00")

func tahCommonGlueSchemasGuest_profileGlueJsonBytes() ([]byte, error) {
	return bindataRead(
		_tahCommonGlueSchemasGuest_profileGlueJson,
		"tah-common-glue-schemas/guest_profile.glue.json",
	)
}

func tahCommonGlueSchemasGuest_profileGlueJson() (*asset, error) {
	bytes, err := tahCommonGlueSchemasGuest_profileGlueJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tah-common-glue-schemas/guest_profile.glue.json", size: 2058, mode: os.FileMode(0644), modTime: time.Unix(1680804270, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0x19, 0x71, 0x74, 0x3c, 0x77, 0x56, 0x4e, 0x32, 0xbf, 0x96, 0x35, 0x13, 0x1a, 0x58, 0xb1, 0xe9, 0xc2, 0x2, 0xa6, 0x5a, 0x1d, 0xd7, 0xfc, 0xd6, 0x78, 0xb1, 0xb2, 0x9b, 0xaf, 0xae, 0x15}}
	return a, nil
}

var _tahCommonGlueSchemasHotel_bookingGlueJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xcd\x6e\xeb\x36\x13\x7d\x17\xad\xb5\xf9\xbe\x76\x25\x5c\x08\x68\x92\xa2\x30\xd0\x26\xc6\x8d\x6f\x36\x45\x17\x63\x71\x64\x33\xa5\x38\xc2\x70\xe4\x6b\x21\xc8\xbb\x17\xd4\x2f\x65\xc7\xf9\xb1\x83\x34\xc5\xf5\xce\xa4\xc8\xa3\x99\x43\x9e\xe1\xa1\xfc\x10\x65\x64\xaa\xc2\xba\x28\xf9\xf3\x21\xb2\x50\x60\x94\x44\xb4\xbc\xc7\x4c\xee\x90\x9d\x26\x1b\xc5\x91\xd4\x25\x46\xc9\x43\xa4\xdd\x9c\x75\xa1\x45\x6f\x30\x4a\x84\x2b\x8c\x23\x6d\xcb\x4a\x6e\x85\xb5\x5d\x45\x49\xa4\xad\x44\x8f\x8f\xf1\x00\x54\x90\x42\x73\x04\x8e\x6b\x7f\x84\x50\x5a\x9d\x08\x80\x5b\x41\xb6\x60\x66\xca\x1d\x42\xca\xc1\xb8\x3d\x28\x60\x86\xfa\x8b\x13\xae\x32\xf9\xa2\x55\xd2\x42\xc7\x33\x75\x0d\x05\xf6\x2d\x62\xbd\xd2\x16\x44\xdb\xd5\x6d\xed\x04\x8b\xee\x41\x9a\x4e\x62\x30\xe0\xe4\x5b\xa9\x40\x50\xdd\x9c\x4a\x48\xc6\xf8\x2e\x38\x41\x4c\x17\xf5\xfb\xc4\xf4\x3e\x38\x9a\xec\xe5\x1a\xac\x45\x33\x3b\x75\xed\xd7\x24\x68\x2e\x49\xe1\x89\x38\xf6\x5a\xaf\xd6\x72\x70\xff\xbc\x46\x12\xf6\xb7\x0a\xdd\x69\x10\x4e\x80\xe5\x0a\xe4\xd4\x6c\xd0\xaa\x77\x40\x59\x93\x51\xc8\x6f\x92\x54\x27\xa6\xb0\x3a\xf4\x42\x1a\x05\x36\xd1\x4a\xdf\x39\x6c\xfa\x27\x46\x5d\xd4\x3b\xa3\xc6\x0e\x2c\x40\x1b\x97\x4c\xa4\xec\xc3\xed\x9f\x83\x52\x8c\xce\xf5\xcd\x92\x75\x01\x5c\x27\x4b\x22\x83\x60\xd3\x34\x2e\xd7\x64\xf1\x19\x00\x5b\x15\x4b\xe4\x03\xf3\xe3\x8c\x2a\x2b\x5c\xfb\x0d\x98\x68\x2b\x69\xda\xbf\xf0\x39\x48\xa3\x2d\xfe\x2f\x6c\xfc\x3f\x6c\xfc\x14\x36\x7e\x1e\x12\xd7\x32\xe4\xec\x04\xa4\x01\xf3\xc0\x99\x7f\x75\x1f\xeb\x58\xb7\xd2\xb8\x64\xda\x68\x9b\xbd\x62\x20\x39\x81\x46\x43\xc3\xcb\xda\xac\x5e\xf1\x8a\x5d\x36\xd7\x64\x89\x75\xae\xb3\x7e\x7c\xae\xd9\x49\x58\x4f\x0b\xad\x94\xc1\xb0\xc7\x2f\x74\xd8\x5e\xa1\x55\x21\xe3\x64\xa9\x1a\x76\x85\xdf\x0f\x37\xf9\x85\x66\x59\x8f\xf3\xed\xaa\x82\xd5\xcb\x89\xda\xa6\xf2\x80\xe9\xa8\x7c\x76\xec\x3d\x2d\x17\x5a\xcc\xf0\xb0\x04\x46\x2b\x97\x54\x94\x60\x87\x85\x30\x54\x83\x91\x7a\xce\xb4\x62\x28\x76\x56\x7c\xdc\xef\x65\xfb\x3c\xcc\xb1\x24\x6d\xc5\x25\xb9\x21\x90\xb6\xf1\xcd\x6a\x99\x3e\x5d\xd0\x35\x6e\xe5\x77\xdc\xa0\xe9\x06\x9a\xe6\x77\x37\xe8\x9e\xb4\x45\x35\x9c\x46\xd3\xe3\xa8\x84\xba\x40\x2b\x33\x9b\x13\x17\x4d\xda\xc7\xc8\xb8\x43\x59\x04\x7b\x37\xcb\x3c\x66\x4f\x9f\xd0\xdf\x38\x2a\x18\x58\x4d\x86\x02\xab\x5f\xb7\x65\xd8\xbc\xdc\x6c\x06\xe1\x6e\x4b\xcd\x4d\x64\x4f\xf0\x1f\xca\xf6\x07\x52\x0f\x53\xe5\x7d\xc6\xf5\xa4\xe4\x40\xd6\x00\x4e\x3b\x37\x54\x65\x6b\xe4\xd9\xd5\x0f\x4d\xd8\xd4\x59\x90\x15\xdc\xca\xc9\x8e\x62\xc5\x54\x95\x27\xa3\x78\xd2\xaa\x37\x79\x81\xa7\xcc\x52\xc5\x8c\x36\x3b\xe8\xb9\x9e\xd3\xee\x01\x16\x63\x57\x17\x4b\xea\x8b\xc8\x0e\x83\x60\x33\x34\x5f\x11\xdc\x71\xe5\x82\x9b\x99\xe3\xaa\x16\xbe\x78\x3c\xb9\x23\x5f\x5b\xb1\x25\x2c\xc1\x7e\x75\x47\xf0\x66\xb1\xa7\x15\xb7\xeb\x9c\xd4\xa0\xb6\xeb\x0e\x4c\x35\xa0\xa6\xbd\x8b\xf0\x16\x69\xa1\x47\x6a\xf6\xcc\x85\x3f\x99\xfe\x20\xa5\x73\xbd\x3f\x38\x7c\x36\xce\xd0\x6e\xc1\xb0\x41\x63\x90\xef\x34\x7e\x87\xa5\xc1\x03\xdb\xd5\xe1\xca\xd3\xf3\x2e\x37\x96\xc1\x04\x0f\x24\xb6\x6e\xd6\x5b\x92\xb8\xb3\xa5\xcd\xef\xc1\x5f\x06\x47\x93\xaa\x32\x39\x78\x74\x29\x74\x19\xeb\x32\x2c\xd3\x4c\x54\xf4\x14\xfb\xc1\xe1\x7b\xc3\x23\xee\x6a\x6f\x6a\x1a\x33\x08\xce\x0d\xd8\x63\xe6\x82\x08\xeb\x65\x25\xbb\xce\xea\x0d\x18\x8d\x3b\xbb\xb1\x27\x00\x34\x16\xc7\x74\xf6\xe4\xec\x74\xcf\x4e\xf7\xec\x74\x3f\xde\xe9\xfa\x9d\xa7\xdb\x04\xbb\xda\x36\x09\xe7\x2c\xc9\xb3\x24\xcf\x92\xfc\x58\x49\xa6\xf1\xfe\x8d\x33\x39\xdf\x22\xcf\xb7\xc8\xff\x02\x61\xdd\x8d\x2f\x8c\xb4\x0a\x8b\xf6\x18\x4e\xd3\x98\x23\x37\xf6\x7a\xaa\x38\x15\xb8\x6a\x03\xcb\x51\x2a\x50\xf8\xc0\xe6\xc8\xf3\xd6\x6b\x4f\xa7\x75\x06\x7c\x16\xea\xd5\x77\xec\x9b\xcf\x0e\xa8\x57\x63\xf8\x8a\xfe\x9e\xf8\x42\xee\x3b\x77\x3f\x7f\x11\x3a\x76\xa2\xc0\xf6\xcc\x43\x9a\xc6\xfd\x86\xb8\x15\xa8\x3f\x53\x42\x02\xdb\x4f\x18\xd5\xb2\x72\xda\xa2\x73\x5f\x2b\xb3\x6b\x51\xa6\xca\xea\x43\x28\x4b\xa3\xd1\x2d\x86\x93\xc2\xa1\xc1\x4c\x88\x87\x0a\xd5\xfe\x9f\x19\x9e\x17\xb9\x46\x33\x64\x47\xc3\xb9\xb1\x99\x7e\x01\xc0\x3c\xc7\xec\xc9\x6f\x13\xb0\x01\x6d\xc2\x7b\x7b\xbb\xc6\xb3\xa2\x84\xac\x67\xa3\xe9\x69\xed\x61\x70\x72\xa6\x31\xd9\x69\x52\x39\x53\xff\x77\x61\x2c\x34\xb8\x08\xfa\x3e\x0e\xeb\x98\xb1\x24\x37\xc7\x4e\xf6\xcb\x4d\x02\x66\x1e\x52\x78\x81\x39\x31\x2e\x60\xbb\x4b\xf4\x0b\xfa\xec\x32\x3c\x7e\xe3\xed\x45\xf2\x4b\x2e\xc8\xff\x72\x20\x5d\xc9\x39\x48\xca\x1b\x64\xf1\x41\xa1\x1e\x62\xed\x13\x44\x3a\xb0\xd8\xa1\x35\x9d\x7d\xbc\x6d\xdf\xee\xdf\x11\xdd\xb7\xc0\x13\x3e\x76\x9d\x3f\x1f\x7a\x46\xff\x7a\xfc\x27\x00\x00\xff\xff\x2c\x7b\x81\x0c\xd6\x21\x00\x00")

func tahCommonGlueSchemasHotel_bookingGlueJsonBytes() ([]byte, error) {
	return bindataRead(
		_tahCommonGlueSchemasHotel_bookingGlueJson,
		"tah-common-glue-schemas/hotel_booking.glue.json",
	)
}

func tahCommonGlueSchemasHotel_bookingGlueJson() (*asset, error) {
	bytes, err := tahCommonGlueSchemasHotel_bookingGlueJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tah-common-glue-schemas/hotel_booking.glue.json", size: 8662, mode: os.FileMode(0644), modTime: time.Unix(1680804270, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0xb2, 0xfe, 0xa1, 0xaa, 0x4, 0x6f, 0x40, 0xef, 0xde, 0xaf, 0xd, 0x80, 0x7c, 0xa1, 0xf5, 0x4, 0xd5, 0x2c, 0xf5, 0xbd, 0x59, 0xfa, 0xe0, 0x60, 0x83, 0x3c, 0x63, 0x57, 0xce, 0xa8, 0x7e}}
	return a, nil
}

var _tahCommonGlueSchemasHotel_stay_revenueGlueJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd3\x41\x4b\x43\x31\x0c\x07\xf0\xef\x92\x73\x3f\x41\x19\x1e\xd4\x8b\x17\x15\x44\x2f\xe2\xa1\x6b\xb3\x2d\xda\x26\x8f\x34\x1d\x3c\xc6\xbe\xbb\x3c\xb6\x27\x13\xb6\x83\x76\xb7\xb4\xa5\xbf\x86\xf0\xef\x0e\xa2\xe4\x56\xb8\x82\x7f\xdf\x01\x87\x82\xe0\x41\x96\x9f\x18\xed\x0d\xb5\x92\x30\x38\xb0\x71\x40\xf0\x3b\xa0\xfa\xac\x54\xc8\x68\x8b\xe0\x4d\x1b\x3a\x20\x1e\x9a\xbd\x98\x12\xaf\xc1\x03\xb1\xc1\x7e\xef\x7e\xa0\x22\x09\xf3\x3f\x9c\x7a\x28\x4e\x29\x4a\x9d\xc0\x52\xe4\x8b\x78\xfd\xd0\xeb\xac\x1b\x56\xeb\x56\x72\xa8\xf6\x3a\xa4\x60\x98\x9e\x7a\x47\x13\x15\xaf\xe2\x9c\xf4\x74\x3b\x5e\xa7\xa7\x7e\xa7\xa9\x22\xc7\x8b\xcc\x2a\xe4\x7a\xce\x69\xd1\x16\x51\x12\xfa\x83\xe9\x26\x6e\xae\xeb\x58\x96\x92\x8f\xab\x9b\x5f\xcf\xad\x48\xab\x3d\x4e\x75\xff\x28\xaf\xc0\x60\x09\x94\x3b\x8d\x61\x23\xdc\xdb\x47\xb5\xa0\x76\x1f\xac\xd7\xd9\x88\x61\xbe\x93\xd4\xeb\x28\x6e\x91\xdb\x45\xe5\x6c\x28\x82\x6a\x18\x17\xc7\x68\x4c\xd7\xe6\x38\x24\xac\x51\x69\x30\x12\x9e\xb7\xe6\xd4\xf9\x3f\x25\xc9\x85\x22\x8d\xcd\xaf\xb2\x04\x73\xd3\x3f\x9a\x4f\xa6\x90\x7d\xec\xbf\x03\x00\x00\xff\xff\xb5\x31\xbe\xfe\x6c\x05\x00\x00")

func tahCommonGlueSchemasHotel_stay_revenueGlueJsonBytes() ([]byte, error) {
	return bindataRead(
		_tahCommonGlueSchemasHotel_stay_revenueGlueJson,
		"tah-common-glue-schemas/hotel_stay_revenue.glue.json",
	)
}

func tahCommonGlueSchemasHotel_stay_revenueGlueJson() (*asset, error) {
	bytes, err := tahCommonGlueSchemasHotel_stay_revenueGlueJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tah-common-glue-schemas/hotel_stay_revenue.glue.json", size: 1388, mode: os.FileMode(0644), modTime: time.Unix(1680804270, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0xf4, 0x2f, 0xb0, 0xb7, 0xfa, 0xd3, 0x52, 0xeb, 0xc, 0x6e, 0x0, 0xd5, 0x8, 0xc7, 0x25, 0x9d, 0xaf, 0xef, 0xc1, 0x44, 0xf3, 0x13, 0xce, 0x1b, 0x15, 0xdd, 0xa7, 0xce, 0x1, 0x44, 0x93}}
	return a, nil
}

var _tahCommonGlueSchemasPax_profileGlueJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x6f\xdb\x30\x0c\xc5\xbf\x8b\xce\xbe\xec\xcf\xc9\x28\x72\x68\x4e\x03\x86\xb4\xc0\xba\x5d\x86\x1d\x18\x8b\x76\x58\x48\xa4\x40\xd1\xc1\x8c\x20\xdf\x7d\x70\x12\xb7\x6e\xb7\xac\x05\xe4\x1b\x69\xcb\xbf\xf7\x4c\x49\xef\xe0\x1a\x09\x7d\xe4\xec\xea\x9f\x07\xc7\x10\xd1\xd5\x2e\x8a\xc7\xf0\x03\x35\x93\xb0\xab\x9c\x0d\x09\x5d\x7d\x70\x94\xef\x95\x22\x19\xed\xd1\xd5\xa6\x3d\x56\x8e\x38\xf5\xf6\xcd\x94\xb8\x73\xb5\xcb\xe7\xe2\x78\xac\x9e\x50\xe4\x0b\x01\x01\xb2\x7d\x4f\x1e\x0c\xfd\x5d\xa9\x99\x46\x71\x11\xce\xcc\xd3\xed\xb0\x8c\xa7\x62\x0e\x46\xa0\x90\xaf\x41\x5a\x08\xf9\x2f\x0a\xa8\xc2\x70\x93\x4d\xfb\xc6\x6e\xc6\xcf\xea\x33\xb7\x02\xef\x15\x73\x9e\xda\xa4\x14\x41\x87\x7a\x2b\x12\x10\x78\xb5\x7a\x21\x9c\x76\xc2\xb8\x90\x30\xf7\x71\x8b\x7a\x45\xb7\x6a\xa4\x67\xd3\x61\x2d\x1e\x6b\x62\x7b\xe5\xe3\x62\x7a\x29\x2b\x81\x18\x3f\xcc\x9b\x8f\xf3\xe6\xd3\xbc\xf9\x3c\x35\x0d\xd9\x30\xd5\xd9\xc0\x4e\xb0\x11\xdc\x8c\x96\xa7\x7f\x84\x38\xd5\xab\x2a\xa9\xec\x89\x9b\x77\x2c\x94\x6c\x10\xd6\xb3\xd7\x97\x69\xbc\x43\xe2\x7f\xbb\xb7\x13\x16\xa5\x96\x9a\xc2\xe3\xd7\x92\x66\xdb\x8c\x75\x19\x27\x92\xf7\x01\x17\x00\x8d\x77\x74\x01\x4c\x87\xec\x51\x0b\x21\x49\x85\xa5\x2f\x4d\x9d\x31\x6f\xee\xda\x5b\x52\xdb\x15\xcf\x86\xbb\x1e\xba\xab\xb3\xf9\xe7\x4d\x79\xe3\x9c\xbd\x10\x60\x30\x12\x86\x40\x76\x35\xd6\x8a\x35\x1e\x65\xfb\x40\x16\x4a\x37\x38\x81\x22\xdb\x5a\x62\x02\x2e\xcd\xe0\x20\x03\x04\x1b\xee\x55\x3a\x85\x58\x10\x44\xe4\x9f\x33\xf0\xc4\xda\x3c\x4f\xa1\x8a\x14\x30\xd7\x6d\x10\xb0\x73\xfd\x20\x1b\xfc\x6d\x5f\x71\x8f\xe1\xf2\x38\x9c\xea\xcb\xfa\x47\x21\xc6\x09\xf8\xea\xfa\x93\x47\x36\x3a\x59\x96\x76\x11\xc3\x23\xe0\xcb\x53\xe7\xc1\x60\xae\xfc\xeb\xf8\x27\x00\x00\xff\xff\xf1\x02\x73\xfb\x71\x08\x00\x00")

func tahCommonGlueSchemasPax_profileGlueJsonBytes() ([]byte, error) {
	return bindataRead(
		_tahCommonGlueSchemasPax_profileGlueJson,
		"tah-common-glue-schemas/pax_profile.glue.json",
	)
}

func tahCommonGlueSchemasPax_profileGlueJson() (*asset, error) {
	bytes, err := tahCommonGlueSchemasPax_profileGlueJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tah-common-glue-schemas/pax_profile.glue.json", size: 2161, mode: os.FileMode(0644), modTime: time.Unix(1680804270, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0xd2, 0xd7, 0xbb, 0x4c, 0x35, 0x95, 0xfc, 0x75, 0x67, 0xa3, 0x4, 0xb2, 0x1f, 0xb9, 0x7c, 0x89, 0x1f, 0x50, 0x19, 0xad, 0xef, 0xd2, 0x8b, 0x6c, 0xc7, 0xda, 0x16, 0x1e, 0xdf, 0xe8, 0x60}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tah-common-glue-schemas/air_booking.glue.json":        tahCommonGlueSchemasAir_bookingGlueJson,
	"tah-common-glue-schemas/clickevent.glue.json":         tahCommonGlueSchemasClickeventGlueJson,
	"tah-common-glue-schemas/guest_profile.glue.json":      tahCommonGlueSchemasGuest_profileGlueJson,
	"tah-common-glue-schemas/hotel_booking.glue.json":      tahCommonGlueSchemasHotel_bookingGlueJson,
	"tah-common-glue-schemas/hotel_stay_revenue.glue.json": tahCommonGlueSchemasHotel_stay_revenueGlueJson,
	"tah-common-glue-schemas/pax_profile.glue.json":        tahCommonGlueSchemasPax_profileGlueJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tah-common-glue-schemas": {nil, map[string]*bintree{
		"air_booking.glue.json":        {tahCommonGlueSchemasAir_bookingGlueJson, map[string]*bintree{}},
		"clickevent.glue.json":         {tahCommonGlueSchemasClickeventGlueJson, map[string]*bintree{}},
		"guest_profile.glue.json":      {tahCommonGlueSchemasGuest_profileGlueJson, map[string]*bintree{}},
		"hotel_booking.glue.json":      {tahCommonGlueSchemasHotel_bookingGlueJson, map[string]*bintree{}},
		"hotel_stay_revenue.glue.json": {tahCommonGlueSchemasHotel_stay_revenueGlueJson, map[string]*bintree{}},
		"pax_profile.glue.json":        {tahCommonGlueSchemasPax_profileGlueJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
