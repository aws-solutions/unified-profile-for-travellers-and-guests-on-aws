// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { PreloadedState } from '@reduxjs/toolkit';
import { Amplify, Auth } from 'aws-amplify';
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';
import persistStore from 'redux-persist/es/persistStore';
import { PersistGate } from 'redux-persist/integration/react';
import { App } from './App.tsx';
import { NotificationContextProvider } from './contexts/NotificationContext.tsx';
import { SplitPanelContextProvider } from './contexts/SplitPanelContext.tsx';
import { ToolsContextProvider } from './contexts/ToolsContext.tsx';
import { TutorialContextProvider } from './contexts/TutorialContext.tsx';
import './i18n';
import { PermissionSystemType } from './store/permissionSystemSlice.ts';
import { RootState, setupStore } from './store/store.ts';
import './styles.css';
import { getDomainValueStorage } from './utils/localStorageUtil.ts';

/**
 * Read the configuration .json file that was generated by the custom resource during deployment.
 * If running in development mode, also enable mock-service-worker to intercept defined http requests.
 */
const getRuntimeConfig = async () => {
    let runtimeConfig: any = {};
    try {
        const response = await fetch('/assets/ucp-config.json');
        runtimeConfig = await response.json();
    } catch (e) {
        console.log('Error reading ucp-config.json file: Double check that the config file is under assets/ in the static content bucket');
        console.log(e);
    }

    return runtimeConfig;
};

getRuntimeConfig().then(json => {
    // to each httpRequest with API.get(), API.post() etc, this function sets headers
    const authorizationHeaderBuilder: () => Promise<{ Authorization: string }> = async () => {
        const session = await Auth.currentSession();
        const localDomain = getDomainValueStorage();
        return { Authorization: `Bearer ${session.getIdToken().getJwtToken()}`, 'customer-profiles-domain': localDomain };
    };

    const awsconfig = {
        Auth: {
            region: json.region,
            userPoolId: json.cognitoUserPoolId,
            userPoolWebClientId: json.cognitoClientId,
        },
        Storage: {
            AWSS3: {
                region: json.region,
            },
        },
        API: {
            endpoints: [
                {
                    name: 'solution-api',
                    endpoint: json.ucpApiUrl + '/',
                    region: json.region,
                    custom_header: authorizationHeaderBuilder,
                },
            ],
        },
    };
    Amplify.configure(awsconfig);

    const initialState: PreloadedState<RootState> = {
        permissionSystem: {
            permissionSystem: { type: json.usePermissionSystem === 'false' ? PermissionSystemType.Disabled : PermissionSystemType.Cognito },
        },
    };
    const store = setupStore(initialState);
    const storePersistor = persistStore(store);
    const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
    root.render(
        <React.StrictMode>
            <BrowserRouter>
                <Provider store={store}>
                    <PersistGate loading={null} persistor={storePersistor}>
                        <NotificationContextProvider>
                            <ToolsContextProvider>
                                <SplitPanelContextProvider>
                                    <TutorialContextProvider>
                                        <App />
                                    </TutorialContextProvider>
                                </SplitPanelContextProvider>
                            </ToolsContextProvider>
                        </NotificationContextProvider>
                    </PersistGate>
                </Provider>
            </BrowserRouter>
        </React.StrictMode>,
    );
});
